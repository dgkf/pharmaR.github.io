# R Packages

**THE FOLLOWING TEXT IS DRAFT ONLY**

The value of R lies not within the official distribution but within the many R packages that support it.  R packages provide the means to extend the language, implementing new statistical methods, graphics and code structures.  However, this is also where the majority of risk lies for an organisation.

R packages can be written by anyone.  The author/maintainer could be an organisation but they are perhaps more likely to be an individual and no qualification is required in order to develop an R package and submit it to CRAN (or any other package repository).  Unlike the base distribution, R packages may or may not follow any software development best practices.  

Packages on CRAN must pass a series of technical checks, including an "R CMD check".  These checks are designed to ensure that examples run successfully, tests pass and that packages on CRAN are compatible with each other.  However, there is no requirement for package authors to write tests or implement a formal unit-testing framework.  In fact, less than 26% of the >13,500 packages on CRAN are known to implement a formal test framework.  In addition, there is no obligation to maintain bug reports and unless a bug in a package affects another package on CRAN, the bugs may never be identified nor fixed.  Unlike the base distribution, the amount of user testing can also vary widely.  Popular packages such as dplyr may have been downloaded and used by tens of thousands of individuals, whilst others might never have been used by anyone except the package author.

In order to apportion an appropriate level of validation effort across different R packages, it is important to establish a risk assessment framework that can be applied to any R package in order to determine a base level of risk.


## Risk Assessment

```{r settings, include = FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# ---
# output:
#   html_document: 
#     toc: true
#     theme: united
#     highlight: textmate
#     keep_md: true
# ---
```


The term, "risk" refers to the risk of an error in the code that, when used appropriately, could lead to an incorrect calculation and hence an incorrect decision when analysing pharmaceutical data.  The relative impact of an error should be determined by the individual organisation.  Impact is therefore not considered as part of the risk assessment.

### Risk Philosophy

The following tables highlight metrics that could be used in order to assess the risk of an R package. The risk assessment has been grouped into two areas:

1.	Package Maintenance
2.	Community Usage and Testing

#### Package Maintenance

```{r maintenance}
met1 <- readr::read_delim("./metrics/maintenance.txt", delim = "\t")
knitr::kable(met1, caption="Package Maintenance Metrics")
```

#### Community Usage and Testing

```{r community}
met2 <- readr::read_delim("./metrics/community.txt", delim = "\t")
knitr::kable(met2, caption="Community Usage and Testing Metrics")
```